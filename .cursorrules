# Personal Automation Hub

Python + FastAPI server for personal service integrations

## Project Structure

```
backend/              # Main FastAPI backend
  api/                # API routes and endpoints
    v1/               # API version 1
    webhooks/         # Webhook handlers
  models/             # Data models and schemas
  services/           # Business logic and services
    notion/           # Notion integration services
  core/               # Core application components
    config.py         # Environment configuration
    security.py       # Authentication and security
terraform/            # AWS infrastructure as code 
  main.tf             # EC2 instance and VPC configuration
  variables.tf        # Infrastructure variables
  outputs.tf          # Output values after deployment
```

## Features

- Notion webhook integration: Create tasks via HTTP requests
- More integrations planned: Calendar sync, Perplexity API, etc.

## Tech Stack

- Python 3.11+, FastAPI, Pydantic
- Environment: .env file with API keys
- Testing: pytest
- Deployment: Docker + Docker Compose, Terraform for AWS EC2

## Local Development

Start the FastAPI server:
```bash
python run.py  # Starts FastAPI server on http://localhost:8000
```

## Local Testing Rules

**IMPORTANT**: When testing locally with terminal commands, ALWAYS load environment variables from .env file first:

```bash
# Load environment variables from .env file
source <(grep -v '^#' .env | sed 's/^/export /')

# OR load specific variables
export WEBHOOK_API_KEY=$(grep WEBHOOK_API_KEY .env | cut -d'=' -f2)

# Then use the environment variable in commands
curl -X POST "http://localhost:8000/api/v1/webhooks/notion-personal/create-task" \
  -H "X-API-Key: $WEBHOOK_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{"title": "Test task", "body": "Test content"}'
```

**Example testing workflow:**
1. Start server: `python run.py`
2. Load env vars: `source <(grep -v '^#' .env | sed 's/^/export /')`
3. Test endpoint: `curl -X POST "http://localhost:8000/api/v1/webhooks/notion-personal/create-task" -H "X-API-Key: $WEBHOOK_API_KEY" -H "Content-Type: application/json" -d '{"title": "Test"}'`

## Deployment Workflow

**IMPORTANT**: Production deployment follows this specific workflow:

1. Develop and test locally first (`python run.py`)
2. Commit and push changes to the public GitHub repository (main branch)
3. Run `terraform apply` from the terraform directory to update production

> **Note**: EC2 instance pulls code directly from GitHub, not your local machine. Changes must be in GitHub repo before they appear in production.

## AWS Deployment

### Initial Setup

First configure AWS CLI with your credentials and region:
```bash
aws configure  # Provide AWS access key, secret key, and region
```

Then run Terraform commands:
```bash
cd terraform && terraform init && terraform apply  # Deploys EC2 instance to AWS
```

## Production URLs and API Keys

### How to Find Current Production Info

1. **Production webhook URL:**
   ```bash
   cd terraform && terraform output webhook_url_stable
   ```

2. **API key:**
   ```bash
   grep "webhook_api_key" terraform/terraform.tfvars
   ```

3. **All available URLs:**
   ```bash
   terraform output  # (from terraform directory)
   ```

4. **Quick test:**
   ```bash
   WEBHOOK_URL=$(cd terraform && terraform output -raw webhook_url_stable)
   API_KEY=$(grep "webhook_api_key" terraform/terraform.tfvars | cut -d'"' -f2)
   curl -X POST "$WEBHOOK_URL" -H "X-API-Key: $API_KEY" -H "Content-Type: application/json" -d '{"title": "Test task"}'
   ```

### Production URL Options

- **webhook_url_stable**: Stable URL with Elastic IP (recommended)
- **webhook_url_stable_http**: Nginx port 80 URL
- **webhook_url**: Current IP URL (may change on restart) 