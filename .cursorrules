# Personal Automation Hub

Python + FastAPI server for personal service integrations

## Project Structure

```
backend/              # Main FastAPI backend
  api/                # API routes and endpoints
    v1/               # API version 1
    webhooks/         # Webhook handlers
  models/             # Data models and schemas
  services/           # Business logic and services
    notion/           # Notion integration services
  core/               # Core application components
    config.py         # Environment configuration
    security.py       # Authentication and security
terraform/            # AWS infrastructure as code 
  main.tf             # EC2 instance and VPC configuration
  variables.tf        # Infrastructure variables
  outputs.tf          # Output values after deployment
```

## Features

- Notion webhook integration: Create tasks via HTTP requests
  - Task title (required): Sets the page name in Notion
  - Task body (optional): Adds content as a paragraph block inside the page
- More integrations planned: Calendar sync, Perplexity API, etc.

## Tech Stack

- Python 3.11+, FastAPI, Pydantic
- Environment: .env file with API keys
- Testing: pytest
- Deployment: Docker + Docker Compose, Terraform for AWS EC2

## Environment Variables Management

**CRITICAL**: This project uses two configuration files that must be kept in sync:

1. **`.env`** (root directory) - For local development
2. **`terraform/terraform.tfvars`** - For production deployment on AWS

### Synchronization Rules

- Both files contain the same environment variables
- `.env` has local/development values
- `terraform.tfvars` has production values
- **You must manually sync both files when adding/changing variables**
- Variable names in terraform.tfvars use snake_case format (e.g., `webhook_api_key`)
- Variable names in .env use UPPER_CASE format (e.g., `WEBHOOK_API_KEY`)

### File Locations

- Local config: `.env` (root directory)
- Production config: `terraform/terraform.tfvars`

### Example Sync Pattern

When adding a new variable:
1. Add to `.env`: `NEW_VARIABLE=local_value`
2. Add to `terraform.tfvars`: `new_variable = "production_value"`
3. Update both backend/core/config.py and terraform/variables.tf if needed

## Local Development

Start the FastAPI server:
```bash
python run.py  # Starts FastAPI server on http://localhost:8000
```

## Local Testing Rules

**IMPORTANT**: When testing locally with terminal commands, ALWAYS load environment variables from .env file first:

```bash
# Load environment variables from .env file
source <(grep -v '^#' .env | sed 's/^/export /')

# OR load specific variables
export WEBHOOK_API_KEY=$(grep WEBHOOK_API_KEY .env | cut -d'=' -f2)

# Then test with title only
curl -X POST "http://localhost:8000/api/v1/webhooks/notion-personal/create-task" \
  -H "X-API-Key: $WEBHOOK_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{"title": "Test task"}'

# Or test with title and body content
curl -X POST "http://localhost:8000/api/v1/webhooks/notion-personal/create-task" \
  -H "X-API-Key: $WEBHOOK_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{"title": "Test task", "body": "Test content that will appear as paragraph in Notion"}'
```

**Example testing workflow:**
1. Start server: `python run.py`
2. Load env vars: `source <(grep -v '^#' .env | sed 's/^/export /')`
3. Test endpoint: `curl -X POST "http://localhost:8000/api/v1/webhooks/notion-personal/create-task" -H "X-API-Key: $WEBHOOK_API_KEY" -H "Content-Type: application/json" -d '{"title": "Test"}'`

**Notion task API parameters:**
- `title` (required): The task title - becomes the page name in Notion
- `body` (optional): Text content - becomes a paragraph block inside the page

## Deployment Workflow

**IMPORTANT**: Production deployment follows this specific workflow:

1. Develop and test locally first (`python run.py`)
2. Commit and push changes to the public GitHub repository (main branch)
3. Run `terraform apply` from the terraform directory to update production

> **Note**: EC2 instance pulls code directly from GitHub, not your local machine. Changes must be in GitHub repo before they appear in production.

## AWS Deployment

### Initial Setup

First configure AWS CLI with your credentials and region:
```bash
aws configure  # Provide AWS access key, secret key, and region
```

Then run Terraform commands:
```bash
cd terraform && terraform init && terraform apply  # Deploys EC2 instance to AWS
```

## Code Deployment Commands

### Deployment Script Usage

Use the deployment script for convenient code updates:

```bash
# Quick deployment (recommended for most changes)
./scripts/deploy.sh quick

# Full recreation (for major changes or when something is broken)
./scripts/deploy.sh recreate
```

### When to Use Each Method

- **Quick deployment**: Code changes, configuration updates (5-10 seconds)
- **Full recreation**: Dependency changes, system fixes, "nuclear option" (2-3 minutes)

### Manual Deployment

```bash
# Quick method (SSH + Git Pull)
INSTANCE_IP=$(cd terraform && terraform output -raw elastic_ip)
ssh ec2-user@$INSTANCE_IP "cd /opt/app && sudo git pull origin main && sudo /usr/local/bin/docker-compose down && sudo /usr/local/bin/docker-compose up -d --build"

# Full recreation method
cd terraform && terraform taint aws_instance.app_server && terraform apply
```

**IMPORTANT**: Changes must be pushed to GitHub before deployment - EC2 instance pulls code from the repository.

## Production URLs and API Keys

### How to Find Current Production Info

1. **Production webhook URL:**
   ```bash
   cd terraform && terraform output webhook_url_stable
   ```

2. **API key:**
   ```bash
   grep "webhook_api_key" terraform/terraform.tfvars
   ```

**REMINDER**: Ensure `terraform.tfvars` contains production values that correspond to your `.env` local values. Both files must be manually kept in sync!

3. **All available URLs:**
   ```bash
   terraform output  # (from terraform directory)
   ```

4. **Quick test:**
   ```bash
   WEBHOOK_URL=$(cd terraform && terraform output -raw webhook_url_stable)
   API_KEY=$(grep "webhook_api_key" terraform/terraform.tfvars | cut -d'"' -f2)
   curl -X POST "$WEBHOOK_URL" -H "X-API-Key: $API_KEY" -H "Content-Type: application/json" -d '{"title": "Test task"}'
   ```

### Production URL Options

- **webhook_url_stable**: Stable URL with Elastic IP (recommended)
- **webhook_url_stable_http**: Nginx port 80 URL
- **webhook_url**: Current IP URL (may change on restart) 